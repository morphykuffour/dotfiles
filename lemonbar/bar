#!/bin/sh
#
# http://github.com/mitchweaver/bin
#
# bar for dwm on OpenBSD
#
# shellcheck disable=2229,2086,2034,2154
#

# -/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
# settings
: "${BAR_LEFT_SYMBOL:= }"
: "${BAR_RIGHT_SYMBOL:= }"
: "${BAR_SEPARATOR:=$BAR_SPACE$BAR_LEFT_SYMBOL$BAR_RIGHT_SYMBOL$BAR_SPACE}"
: "${BAR_SPACE:= }"
: "${BAR_OPEN:=$BAR_RIGHT_SYMBOL}"
: "${BAR_CLOSE:=$BAR_LEFT_SYMBOL}"
: "${BAR_SCROLL_NECESSARY:=44}" # for media skroll
# -/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

case $(uname) in
    OpenBSD)
        # get correct interface
        for i in urtwn0 iwm0 iwn0 iwx0 em0 re0 ; do
            if ifconfig | grep $i >/dev/null ; then
                int=$i
                break
            fi
        done
        ;;
    Linux)
        for i in wlan0 eth0 ; do
            if ifconfig | grep $i >/dev/null ; then
                int=$i
                break
            fi
        done
esac

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

iswireless() {
    case $int in
        # OpenBSD
        iwn?|iwm?|urtwn?|iwx?)
            ;;
        # Linux
        wlan?)
            ;;
        *)
            return 1
    esac
}

# home_partition_space() {
#     case $(uname) in
#         Linux)
#             tags='drive size used avail mountpoint'
#             ;;
#         OpenBSD)
#             tags='drive size used avail capacity mountpoint'
#     esac
#     df -h /home | while read -r $tags ; do
#         case $mountpoint in
#             */home*)
#                 printf ' %s' "$capacity"
#                 # printf ' %s/%s' "$used" "$size"
#         esac
#     done
# }

# get_vpn() {
    # loc=$(piavpn -g)
    # if [ "$loc" ] ; then
    #     printf '%s' " $loc"
    # else
    #     printf '%s' " None"
    # fi
# }


get_stocks() {
    if [ -d "${XDG_CACHE_HOME:-${HOME}/.cache}/stock-ticker" ] ; then
        if [ -f "${XDG_CACHE_HOME:-${HOME}/.cache}/stock-ticker"/spy ] ; then
            read -r spy < "${XDG_CACHE_HOME:-${HOME}/.cache}/stock-ticker"/spy
            if [ "$spy" ] ; then
                printf 'SPY: %s' "$spy"
            fi
        fi
    fi

}

get_crypto() {
    if [ -d "${XDG_CACHE_HOME:-${HOME}/.cache}/crypto-ticker" ] ; then
        if [ -f "${XDG_CACHE_HOME:-${HOME}/.cache}/crypto-ticker"/btc ] ; then

            read -r btc < "${XDG_CACHE_HOME:-${HOME}/.cache}/crypto-ticker"/btc
            read -r eth < "${XDG_CACHE_HOME:-${HOME}/.cache}/crypto-ticker"/eth

            [ "$btc" ] && printf ' %s' "$btc"
            printf ' '
            [ "$eth" ] && printf 'ETH %s' "$eth"

        fi
    fi
}

get_weather() {
    if [ -f "${WEATHERD_OUTPUT_FILE:-${XDG_CACHE_HOME:-${HOME}/.cache}/weatherd/output}" ] ; then
        read -r info < "${WEATHERD_OUTPUT_FILE:-${XDG_CACHE_HOME:-${HOME}/.cache}/weatherd/output}"
        if [ "$info" ] ; then
            printf '%s' "$info"
        fi
    else
        printf 'No location.'
    fi
}

get_media() {
    skroll_text=${XDG_CACHE_HOME:-~/.cache}/bar_skroll
    if [ -f "$skroll_text" ] ; then
        media=$(tail -n 1 "$skroll_text" 2>/dev/null)
    fi
    if [ "$media" ] ; then
        # if its short enough we don't need to scroll,
        # just print it
        if [ ${#media} -lt "$BAR_SCROLL_NECESSARY" ] ; then
            printf ' [%s]' "$media"
        else
            # otherwise pad any space left with correct
            # amount of spaces so the scroll stays within
            # the "box" as not to constantly expand/shrink
            media=$(printf '%s\n' "$media" | sed -E -e 's/ +//' -e 's/ +$//')
            while [ ${#media} -lt "$BAR_SCROLL_NECESSARY" ] ; do
                case $media in
                    ' '*)
                        media="$media "
                        ;;
                    *)
                        media=" $media"
                esac
            done
            printf ' [%s]' "$media"
        fi
    fi
}

# runs in background fetching song with either
# mpv ipc or youtube-dl
#
# uses skroll to scroll the text in the file
# which is grabbed by get_media()
#
# only scrolls if length of the string longer
# than $BAR_SCROLL_NECESSARY
media_daemon() {
    skroll_text=${XDG_CACHE_HOME:-~/.cache}/bar_skroll
    :>$skroll_text
    read -r bar_pid < ${XDG_CACHE_HOME:-~/.cache}/bar_pid
    while kill -0 "$bar_pid" >/dev/null 2>&1 ; do
        if mmt -i ; then
            song=$(song)

            # make sure we're not given junk
            case $song in
                *playback-restart*)
                    continue
            esac

            if [ ${#song} -gt "$BAR_SCROLL_NECESSARY" ] ; then
                printf '%s\n' "$song" | \
                    skroll -r -l -n "$BAR_SCROLL_NECESSARY" >> "$skroll_text" &
                skroll_pid=$!
                echo $skroll_pid > ${XDG_CACHE_HOME:-~/.cache}/bar_skroll.pid
                while mmt -i && kill -0 "$bar_pid" >/dev/null 2>&1 ; do
                    sleep 1
                done
                :>$skroll_text
                kill -9 $skroll_pid
            else
                printf '%s\n' "$song" >> "$skroll_text"
            fi
        else
            sleep 5
        fi
    done
}

quit() {
    read -r pid < "${XDG_CACHE_HOME:-~/.cache}/bar_pid"
    kill -9 "$pid"
    read -r pid < "${XDG_CACHE_HOME:-~/.cache}/bar_skroll.pid"
    kill -9 "$pid"
}


info() {
    printf '%s' "$BAR_OPEN"

    # extra little script to put little things in temporarily
    if [ -x ~/.bar ] ; then
        sh ~/.bar
        printf '%s' "$BAR_SEPARATOR"
    fi

    if mmt -i ; then
        get_media
        printf '%s' "$BAR_SEPARATOR"
    fi

    if isconnected ; then
        # get_stocks
        # printf '%s' "$BAR_SEPARATOR"
        if [ -f "${XDG_CACHE_HOME:-${HOME}/.cache}/crypto-ticker"/btc ] ; then
            get_crypto
            printf '%s' "$BAR_SEPARATOR"
        fi
        get_weather
        printf '%s' "$BAR_SEPARATOR"
    fi

    # get_vpn
    # printf '%s' "$BAR_SEPARATOR"

    if iswireless && isconnected ; then
        get_wireless_info
        printf '%s' "$BAR_SEPARATOR"
    fi

    case $(uname) in
        OpenBSD)
            case $(apm -a) in
                255)
                    ;;
                0|1)
                    get_bat
                    printf '%s' "$BAR_SEPARATOR"
            esac
            ;;
        Linux)
            # shellcheck disable=2046
            if [ $(printf '%s\n' /sys/class/power_supply/*/ | wc -l) -ne 1 ] ; then
                get_bat
                printf '%s' "$BAR_SEPARATOR"
            fi
    esac

    # home_partition_space
    # printf '%s' "$BAR_SEPARATOR"

    get_vol
    printf '%s' "$BAR_SEPARATOR"
    get_date
    printf '%s' "$BAR_CLOSE"
}

start() {
    media_daemon &
    media_daemon_pid=$!
    trap 'xsetroot -name killed ; kill -9 $media_daemon_pid ; exit' INT TERM
    echo $$ > "${XDG_CACHE_HOME:-~/.cache}/bar_pid"
    while sleep 1 ; do
        xsetroot -name "$(info)"
    done
}

main() {
    case $1 in
        -d)
            start
            ;;
        -q)
            quit
            ;;
        -r)
            quit
            start
            ;;
        *)
            info
    esac
}

main "$@"

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# BELOW IS OLD LINUX BAR, REWRITING FOR OPENBSD...
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


